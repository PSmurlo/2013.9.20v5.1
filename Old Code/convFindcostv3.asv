function [vd,leng,cost,misc] = ...
    convFindcostv3(x,qH,qW,modPV,eleDim,CBqH,inv,inputs)

%% Tables
load('wirePriceFt.mat');
addpath('Voltage Drop');
wirePriceCu = wirePriceFtCu * 3.28; % dollars per kilometer
wirePriceAl = wirePriceFtAl * 3.28; % dollars per kilometer

%% Input Arguments
numCB = x(1);
wireIndex = x(2);
minIndex = x(3);
cbStrings = x(4);

%% Inverter Cost
ACdollarPerWatt=.3;
cost.inverter=inv.paco*inv.num_inverters*ACdollarPerWatt;
num_inverters=inv.num_inverters/4; %4 per skid

% dimensionIndex = x(4);
%cbStrings = cbInfo(7,x(1));

%% Required Array Information
Imp = modPV.Imp;
Vmpmax= modPV.vmpmax; % nominal Voltage of module
totH = eleDim.totH;
totW = eleDim.totW;
% wire_l= eleDim.wire_l; % only used for Alencon

Tc = 75; % conductor rating
%% kW STC
modules=qH*2*qW*2*76; %total number of modules in array
misc.modulesW=modules*modPV.Imp*modPV.Vmp*(inv.num_inverters/4); % Total Power rating of array

%% Module to Combiner box
leng.wire.m2cb = 0;
m2cbRes = resistLookup(Tc,'Cu'); %TODO: make into global
[leng.wire.m2cb,longestm2cb1way] = stringRuns(qW,qH,totW,totH,numCB,eleDim.modality,CBqH);
cost.wire.m2cb = (leng.wire.m2cb) * (wirePriceCu(5) / 1000); % $/m times m = dollars

%% Combiner Box to Inverter
leng.wire.cb2inv = 0;
cb2invRes = resistLookup(Tc,'Al'); %TOD
[longestcb2inv1way,leng.wire.cb2inv,qHleft] = aluminumRuns(numCB,qH,totH,5); % total wire length north-south (meters)

% Downsize shorter runs
[~,vd.stringmax] = voltDrop(longestm2cb1way,m2cbRes(5),Imp,Vmpmax); % VD of 10 gauge strings
[~,vd.cb2invmax] = voltDrop(longestcb2inv1way,cb2invRes(wireIndex),Imp*cbStrings,Vmpmax); % VD of chosen cb to inverter conductors
for i=length(leng.wire.cb2inv):-1:1
    trunkInfo(i,1)=leng.wire.cb2inv(i); % Length
    if (i==1 && qHleft>0) % If the last combiner box is not full
        minIndex = ampacityCheck(modPV.Ta,Tc,0,'15b17',modPV.Isc*1.25*1.25*qHleft*qW*4,2);
    end
    for j= minIndex:wireIndex
        [~,VDj] = voltDrop(trunkInfo(i,1),cb2invRes(j),Imp*cbStrings,Vmpmax); % Volt drop% check
        if (VDj > vd.cb2invmax) % if the voltage drop is higher than the max continue loop
            continue
        elseif(VDj <= vd.cb2invmax)
            trunkInfo(i,2)=j;   % Wire Size Index
            trunkInfo(i,3)=VDj; % Voltage Drop
            trunkInfo(i,4)=trunkInfo(i,1)*(wirePriceAl(j))/1000*2; %Cost
%             indexLength(1,j)=indexLength(1,j)+leng.wire.cb2inv(i);
            trunkInfo(i,5)=minIndex;
            lol=5;
            break
        end
    end
end
vd.max = vd.stringmax + vd.cb2invmax;
cost.wire.cb2inv = sum(trunkInfo(:,4));
%% Power Loss
% sImpHourly=modPV.dc_current.^2;
% cbImpHourly=(modPV.dc_current*cbStrings).^2;
% sResAvg=(m2cbRes/1000*leng.wire.m2cb);
% cbResAvg=cb2invRes/1000*leng.wire.cb2inv;
% kwhLoss.m2cb=sum(sImpHourly*sResAvg/1000);
% kwhLoss.cb2inv=sum(cbImpHourly*cbResAvg/1000);
% degredation=linspace(1,.8,25);
% kwhLoss.total=sum(kwhLoss.cb2inv+kwhLoss.m2cb.*degredation);



%% Length of Cable Tray

leng.CT.m2cb=((qW-1)*totW*qH + ((CBqH-1) * totH * numCB));
leng.CT.cb2inv = longestcb2inv1way;

%% Multiply Components for Entire Array

%top/bottom
numCB=numCB*2;
cost.wire.cb2inv = cost.wire.cb2inv *2; % Top and bottom
leng.wire.cb2inv = leng.wire.cb2inv *2;
leng.CT.cb2inv = leng.CT.cb2inv*2;

%per quad
% misc.modulesW=misc.modulesW*4;
cost.wire.m2cb = cost.wire.m2cb * 4;
leng.wire.m2cb = leng.wire.m2cb * 4;
leng.CT.m2cb=leng.CT.m2cb*4;
%% Multiply Components for Multiple arrays

numCB=numCB*num_inverters;

cost.wire.m2cb = cost.wire.m2cb*num_inverters;
leng.wire.m2cb = leng.wire.m2cb*num_inverters;
cost.wire.cb2inv = cost.wire.cb2inv *num_inverters; % Top and bottom
leng.wire.cb2inv = leng.wire.cb2inv *num_inverters; % Top and bottom

leng.CT.m2cb=leng.CT.m2cb*num_inverters;
leng.CT.cb2inv = leng.CT.cb2inv*num_inverters;

%% Cost of Conductor
cost.wire.total= cost.wire.m2cb +cost.wire.cb2inv;
%% Cost of Combiner Box
cost.CB.raw = numCB * inputs.costs.raw.cbs;

%% Cost of Combiner Box Labor
cost.CB.labor = numCB * inputs.costs.labor.cbs;
cost.CB.total = cost.CB.raw+cost.CB.labor;

%% Cost of Cable Tray
cost.CT.cb2inv.raw= leng.CT.cb2inv*inputs.costs.raw.cb2invtray;
cost.CT.m2cb.raw = leng.CT.m2cb*inputs.costs.raw.m2cbtray;
cost.CT.raw = cost.CT.cb2inv.raw + cost.CT.m2cb.raw;

%% Cost of Cable Tray Labor
cost.CT.cb2inv.labor = leng.CT.cb2inv*inputs.costs.labor.cb2invtray;
cost.CT.m2cb.labor = leng.CT.m2cb*inputs.costs.labor.m2cbtray;
cost.CT.labor =cost.CT.m2cb.labor + cost.CT.cb2inv.labor;

%% Cost of Conductor Labor
cost.wire.cb2inv.labor=(sum(leng.wire.cb2inv) * inputs.costs.labor.cb2inv);
cost.wire.m2cb.labor = leng.wire.m2cb * inputs.costs.labor.m2cb;
cost.wire.labor=cost.wire.m2cb.labor+cost.wire.cb2inv.labor;

%% Totals
cost.labor.total= cost.CT.labor + cost.CB.labor + cost.wire.labor;
cost.raw.total= cost.CT.raw +cost.CB.raw + cost.wire.total +cost.inverter;
cost.total= cost.labor.total + cost.raw.total; 

%% Outputs as Structs
conductor.size = wireIndex;

misc.table.height = totH;
misc.table.width = totW;
misc.table.number= totH*totW;
misc.cb = numCB;
misc.cbstrings = cbStrings;
misc.quad.height = qH;
misc.quad.width = qW;
